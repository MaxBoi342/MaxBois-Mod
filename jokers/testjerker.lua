-- ---@diagnostic disable: need-check-nil
-- SMODS.Joker { --test jerker
--     key = "testjerker",
--     config = {
--         extra = {
--             Xmult = 3
--         }
--     },
--     -- loc_txt = {
--     --     ['name'] = 'test jerker',
--     --     ['text'] = {
--     --         [1] = 'A {C:page}black{} joker with {C:red}unique{} effects.'
--     --     }
--     -- },
--     pos = {
--         x = 6,
--         y = 0
--     },
--     cost = 4,
--     rarity = 1,
--     blueprint_compat = true,
--     eternal_compat = true,
--     perishable_compat = true,
--     unlocked = true,
--     discovered = true,
--     atlas = 'CustomJokers',

--     set_ability = function(self, card, initial)
--         G.GAME.current_round.debuffRank_card = { rank = '7', id = 7 }
--     end,

--     calculate = function(self, card, context)
--         -- give xmult 
--         if context.joker_main then
--             local cardswithfaces = {}
--             -- local jackCount = 0
--             -- local queenCount = 0
--             -- local kingCount = 0

--             for _, card in ipairs(context.scoring_hand) do
--                 if card:is_face() then
--                     local id = card:get_id()
--                         if cardswithfaces[id] then
--                             cardswithfaces[id] = cardswithfaces[id] + 1
--                         else
--                             cardswithfaces[id] = 1
--                         end
--                 end

--                 -- if card:get_id() == 11 then --counting jacks
--                 --     jackCount = jackCount + 1
--                 -- end
--                 -- if card:get_id() == 12 then -- counting queens
--                 --     queenCount = queenCount + 1
--                 -- end
--                 -- if card:get_id() == 13 then -- counting queens
--                 --     kingCount = kingCount + 1
--                 -- end
--             end

--             -- if jackCount >= 3 or queenCount >= 3 or kingCount >= 3 then
--             for id, numberofcards in pairs(cardswithfaces) do
--                 print('come on ' .. numberofcards)
--                 if numberofcards >= 3 then
--                     return {
--                         xmult = card.ability.extra.Xmult
--                     }
--                 end
--             end
--         end
--     end,
-- }
