[manifest]
version = "1.0.0"
priority = 0

# Credits to Somethingcom515 (creator of Seals On Everything mod) for this patch!

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''
for k, v in ipairs(G.play.cards) do
    if (not v.shattered) and (not v.destroyed) then 
        draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
        it = it + 1
    end
end
'''
position = "at"
payload = '''
local handcards = {}
for k, v in ipairs(G.play.cards) do
    if (not v.shattered) and (not v.destroyed) and not v.config.parked then 
        draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
        it = it + 1
    end
    if (not v.shattered) and (not v.destroyed) and v.config.parked then
        table.insert(handcards, v)
        it = it + 1
    end
end
if #handcards > 0 then
    G.FUNCS.draw_from_play_to_hand(handcards)
    for k, v in ipairs(G.play.cards) do
        v.config.parked = false
    end
end
'''
overwrite = true
match_indent = true

# Pattern to not destroy cards with this seal

[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''
local dissolve_time = 0.7*(dissolve_time_fac or 1)
    self.dissolve = 0
    self.dissolve_colours = dissolve_colours
'''
position = "at"
payload = '''
if self.seal == 'maxboism_lockseal' and not self.debuff then
    for i, v in ipairs(G.play.cards) do
        if v == self then
            table.remove(G.play.cards, i)
           G.play:remove_from_highlighted(self, true)
        end
    end
    for i, v in ipairs(G.hand.cards) do
        if v == self then
            table.remove(G.hand.cards, i)
            G.hand:remove_from_highlighted(self, true)
        end
    end
    if G.STATE == G.STATES.SHOP or G.STATE == G.STATES.SMODS_BOOSTER_OPENED then
        G.deck:emplace(self)
    else
        G.discard:emplace(self)
    end
    self.destroyed = nil
    return
end
local dissolve_time = 0.7*(dissolve_time_fac or 1)
    self.dissolve = 0
    self.dissolve_colours = dissolve_colours
'''
overwrite = true
match_indent = true

# #Same patch as above but for glass cards

[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''
local dissolve_time = 0.7
    self.shattered = true
    self.dissolve = 0
    self.dissolve_colours = {{1,1,1,0.8}}
'''
position = "at"
payload = '''
if self.seal == 'maxboism_lockseal' and not self.debuff then
    for i, v in ipairs(G.play.cards) do
        if v == self then
            table.remove(G.play.cards, i)
           G.play:remove_from_highlighted(self, true)
        end
    end
    for i, v in ipairs(G.hand.cards) do
        if v == self then
            table.remove(G.hand.cards, i)
            G.hand:remove_from_highlighted(self, true)
        end
    end
    if G.STATE == G.STATES.SHOP or G.STATE == G.STATES.SMODS_BOOSTER_OPENED then
        G.deck:emplace(self)
    else
        G.discard:emplace(self)
    end
    self.destroyed = nil
    return
end
local dissolve_time = 0.7
    self.shattered = true
    self.dissolve = 0
    self.dissolve_colours = {{1,1,1,0.8}}
'''
overwrite = true
match_indent = true

# am I a bum?

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''
local flags = SMODS.calculate_context(context)
        if flags.remove then destroyed = true end
'''
position = "at"
payload = '''
local flags = SMODS.calculate_context(context)
        if flags.remove and (card.seal ~= 'maxboism_lockseal' or card.debuff) then destroyed = true end
'''
overwrite = true
match_indent = false

# friendendary hook(s)

[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''
if card.ability.consumeable then
    if (card.area == G.pack_cards and G.pack_cards) then
'''
position = "at"
payload = '''
if card.ability.consumeable then
    if (card.area == G.pack_cards and G.pack_cards) and card.ability.name == 'The Soul' then
       return {
      n=G.UIT.ROOT, config = {padding = 0, colour = G.C.CLEAR}, nodes={
        {n=G.UIT.C, config={padding = 0.15, align = 'cl'}, nodes={
          {n=G.UIT.R, config={align = 'cl'}, nodes={
                {n=G.UIT.C, config={align = "cr"}, nodes={
      
      {n=G.UIT.C, config={ref_table = card, align = "cr",maxw = 1.25, padding = 0.1, r=0.08, minw = 1.25, minh = (card.area and card.area.config.type == 'joker') and 0 or 1, hover = true, shadow = true, colour = G.C.ORANGE, one_press = true, button = 'transform_soul'}, nodes={
        {n=G.UIT.B, config = {w=0.1,h=0.6}},
        {n=G.UIT.T, config={text = '???',colour = G.C.UI.TEXT_LIGHT, scale = 0.55, shadow = true}}
      }}
    }}
          }},
          {n=G.UIT.R, config={align = 'cl'}, nodes={
            {n=G.UIT.C, config={align = "cr"}, nodes={
      
      {n=G.UIT.C, config={ref_table = card, align = "cr",maxw = 1.25, padding = 0.1, r=0.08, minw = 1.25, minh = (card.area and card.area.config.type == 'joker') and 0 or 1, hover = true, shadow = true, colour = G.C.UI.BACKGROUND_INACTIVE, one_press = true, button = 'use_card', func = 'can_use_consumeable'}, nodes={
        {n=G.UIT.B, config = {w=0.1,h=0.6}},
        {n=G.UIT.T, config={text = localize('b_use'),colour = G.C.UI.TEXT_LIGHT, scale = 0.55, shadow = true}}
      }}
    }}
          }},
        }},
    }}
    elseif (card.area == G.pack_cards and G.pack_cards) then
'''
overwrite = true
match_indent = false

[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''
local x_off = (self.ability.consumeable and -0.1 or 0)
            self.children.use_button = UIBox{
                definition = G.UIDEF.use_and_sell_buttons(self), 
                config = {align=
                        ((self.area == G.jokers) or (self.area == G.consumeables)) and "cr" or
                        "bmi"
                    , offset = 
                        ((self.area == G.jokers) or (self.area == G.consumeables)) and {x=x_off - 0.4,y=0} or
                        {x=0,y=0.65},
                    parent =self}
            }
'''
position = "at"
payload = '''
local x_off = (self.ability.consumeable and -0.1 or 0)
    if self.ability.name == 'The Soul' then
        self.children.use_button = UIBox{
                definition = G.UIDEF.use_and_sell_buttons(self), 
                config = {align= "cr", offset = {x=x_off - 0.4,y=0}, parent = self}
            }
    else
            self.children.use_button = UIBox{
                definition = G.UIDEF.use_and_sell_buttons(self), 
                config = {align=
                        ((self.area == G.jokers) or (self.area == G.consumeables)) and "cr" or
                        "bmi"
                    , offset = 
                        ((self.area == G.jokers) or (self.area == G.consumeables)) and {x=x_off - 0.4,y=0} or
                        {x=0,y=0.65},
                    parent =self}
            }
    end
'''
overwrite = true
match_indent = false

[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''
end

        return true end }))
    end
'''
position = "at"
payload = '''
end

        return true end }))
    elseif self.ability.name == 'The Soul' then
        stop_use()
        
        G.GAME.pack_size = 2
        G.GAME.pack_choices = 2
        self.states.hover.can = false

        G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()
            self:explode()
            local pack_cards = {}

            G.E_MANAGER:add_event(Event({trigger = 'after', delay = 1.3*math.sqrt(G.SETTINGS.GAMESPEED), blockable = false, blocking = false, func = function()
                local _size = 2
                
                for i = 1, _size do
                    local card = nil  
                        card = create_card("friend", G.pack_cards, nil, nil, true, true, nil, 'fre')

                    card.T.x = self.T.x
                    card.T.y = self.T.y
                    card:start_materialize({G.C.WHITE, G.C.WHITE}, nil, 1.5*G.SETTINGS.GAMESPEED)
                    pack_cards[i] = card
                end
                return true
            end}))

            G.E_MANAGER:add_event(Event({trigger = 'after', delay = 1.3*math.sqrt(G.SETTINGS.GAMESPEED), blockable = false, blocking = false, func = function()
                if G.pack_cards then 
                    if G.pack_cards and G.pack_cards.VT.y < G.ROOM.T.h then 
                    for k, v in ipairs(pack_cards) do
                        G.pack_cards:emplace(v)
                    end
                    return true
                    end
                end
            end}))

        return true end }))
    end
'''
overwrite = true
match_indent = false

#set cost hook my beloved

[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''
self.extra_cost = 0 + G.GAME.inflation
'''
position = "at"
payload = '''
if self.ability.set == 'page' then
    self.extra_cost = 0 + G.GAME.inflation + (G.GAME.homophobic_inflation or 0)
else
    self.extra_cost = 0 + G.GAME.inflation 
end
'''
overwrite = true
match_indent = false

#FUCKING SNAD FIX

# [[patches]]
# [patches.pattern]
# target = '''card.lua'''
# pattern = '''
#                 if self.children.front and self.ability.effect ~= 'Stone Card' then
#                     self.children.front:draw_shader('negative', nil, self.ARGS.send_to_shader)
#                 end
# '''
# position = "at"
# payload = '''
#                 if self.children.front then
#                     self.children.front:draw_shader('negative', nil, self.ARGS.send_to_shader)
#                 end
# '''
# overwrite = true
# match_indent = false

# #FUCKING SNAD FIX 2

# [[patches]]
# [patches.pattern]
# target = '''card.lua'''
# pattern = '''
#                 if self.children.front and self.ability.effect ~= 'Stone Card' then
#                     self.children.front:draw_shader('dissolve')
#                 end
# '''
# position = "at"
# payload = '''
#                 if self.children.front then
#                     self.children.front:draw_shader('dissolve')
#                 end
# '''
# overwrite = true
# match_indent = false

#patch main box out when card is flipped
[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''      if AUT.info then
        for k, v in ipairs(AUT.info) do
          info_boxes[#info_boxes+1] =
          {n=G.UIT.R, config={align = "cm"}, nodes={
          {n=G.UIT.R, config={align = "cm", colour = lighten(G.C.JOKER_GREY, 0.5), r = 0.1, padding = 0.05, emboss = 0.05}, nodes={
            info_tip_from_rows(v, v.name),
          }}
        }}
        end
      end'''
position = "after"
payload = '''
if card.facing == 'back' and card.area == G.deck then
    return {n=G.UIT.ROOT, config = {align = 'cm', colour = G.C.CLEAR}, nodes={
        {n=G.UIT.C, config={align = "cm", func = 'show_center_infotip', object = Moveable(), ref_table = next(info_boxes) and info_boxes or nil}, nodes={}},
    }}
end
'''
overwrite = false
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/button_callbacks.lua'''
pattern = '''
if card.ability.set == 'Booster' then
      G.CONTROLLER.locks.use = false
      G.TAROT_INTERRUPT = nil
    else
'''
position = "at"
payload = '''
if card.ability.set == 'Booster' or card.config.pseudo_open then
      G.CONTROLLER.locks.use = false
      G.TAROT_INTERRUPT = nil
    else
'''
overwrite = true
match_indent = false

#general pseudo_open function??
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''
function Card:open()
    if self.ability.set == "Booster" then
'''
position = "at"
payload = '''
function Card:open()
    if self.ability.set == "Booster" or self.config.pseudo_open then  
'''
overwrite = true
match_indent = false

#implementation of backstickers
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''
-- TARGET: add your own individual scoring targets
'''
position = "before"
payload = '''
    for _, key in ipairs(MaxBoiSM.get_active_backstickers()) do
        t[#t + 1] = { object = MaxBoiSM.Backstickers[key], scored_card = G.deck.cards[1] or G.deck }
    end
'''
overwrite = false
match_indent = false

# Add fusion ability to multibox -credit SDM_0
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if AUT.info then"
position = "before"
payload = """
if card and card.ability and card.ability.extra and type(card.ability.extra) == 'table' and card.ability.extra.maxboism_multi_boxes and MaxBoiSM.config.showmergedesc then
    multi_boxes = {}
    local _first = true
    if card.ability.extra.maxboism_multi_boxes then
        for i, v in ipairs(card.ability.extra.maxboism_multi_boxes) do
            local key = v[1]
            if not G.maxboism_savedjokercards then break end
            if not G.maxboism_savedjokercards[card.sort_id] then break end
            local fusion_ui = Card.generate_UIBox_ability_table(G.maxboism_savedjokercards[card.sort_id][key])
            if _first then
               AUT.main = fusion_ui.main
               AUT.main.main_box_flag = true
               _first = false
            else
                multi_boxes[#multi_boxes + 1] = desc_from_rows(fusion_ui.main)
            end
        end
    end
end
"""
match_indent = true

#seals you bastard son of a bitch i love you
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''
love.graphics.translate(
    moveable.VT.x+moveable.VT.w/2 + (offset and offset.x or 0) + ((moveable.layered_parallax and moveable.layered_parallax.x) or ((moveable.parent and moveable.parent.layered_parallax and moveable.parent.layered_parallax.x)) or 0),
    moveable.VT.y+moveable.VT.h/2 + (offset and offset.y or 0) + ((moveable.layered_parallax and moveable.layered_parallax.y) or ((moveable.parent and moveable.parent.layered_parallax and moveable.parent.layered_parallax.y)) or 0))
'''
position = "at"
payload = '''
love.graphics.translate(moveable.VT.x+moveable.VT.w/2, moveable.VT.y+moveable.VT.h/2)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''
love.graphics.scale(moveable.VT.scale*scale)
'''
position = "after"
payload = '''
love.graphics.translate(
    (offset and offset.x or 0) + ((moveable.layered_parallax and moveable.layered_parallax.x) or ((moveable.parent and moveable.parent.layered_parallax and moveable.parent.layered_parallax.x)) or 0),
    (offset and offset.y or 0) + ((moveable.layered_parallax and moveable.layered_parallax.y) or ((moveable.parent and moveable.parent.layered_parallax and moveable.parent.layered_parallax.y)) or 0))
'''
match_indent = true